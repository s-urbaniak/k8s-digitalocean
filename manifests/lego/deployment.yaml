apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-lego-serviceaccount
  namespace: kube-lego
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kube-lego-clusterrole
rules:
  # Allow to do *everything* with ingresses. I can't find any use of ingress/status in the kube-lego
  # source code
  # TODO: this should be trimmed further, I don't see any use of PATCH and UPDATE insofar
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs:
    - get
    - update
    - create
    - list
    - patch
    - delete
    - watch
  # allow global access to manage secrets (to write the keys)
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - create
    - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: kube-lego-role
  namespace: kube-lego
rules:
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - create
    - get
    - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: kube-lego-role-binding
  namespace: kube-lego
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-lego-role
subjects:
  - kind: ServiceAccount
    name: kube-lego-serviceaccount
    namespace: kube-lego
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kube-lego-clusterrole-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-lego-clusterrole
subjects:
  - kind: ServiceAccount
    name: kube-lego-serviceaccount
    namespace: kube-lego
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-lego
  namespace: kube-lego
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: kube-lego
    spec:
      serviceAccountName: kube-lego-serviceaccount
      containers:
      - name: kube-lego
        image: jetstack/kube-lego:0.1.5
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: LEGO_EMAIL
          valueFrom:
            configMapKeyRef:
              name: kube-lego
              key: lego.email
        - name: LEGO_URL
          valueFrom:
            configMapKeyRef:
              name: kube-lego
              key: lego.url
        - name: LEGO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LEGO_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 1
