apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: oauth2-proxy
  name: oauth2-proxy
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: oauth2-proxy
  template:
    metadata:
      labels:
        k8s-app: oauth2-proxy
    spec:
      volumes:
      - name: users
        configMap:
          name: oauth-users
      containers:
      - image: docker.io/surbaniak/oauth2_proxy:b5e5d01
        imagePullPolicy: Always
        name: oauth2-proxy
        args:
        - -provider=google
        - -upstream=file:///dev/null
        - -http-address=0.0.0.0:4180
        - -pass-access-token=true
        - -ssl-insecure-skip-verify
        - -authenticated-emails-file=/etc/oauth/whitelist
        # Register a new application
        # https://github.com/settings/applications/new
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: ${oidc_client_id}
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: ${oidc_client_secret}
        # python -c 'import os,base64; print base64.b64encode(os.urandom(16))'
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: ${oidc_cookie_secret}
        ports:
        - containerPort: 4180
          protocol: TCP
        volumeMounts:
        - name: users
          mountPath: /etc/oauth
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: oauth2-proxy
  name: oauth2-proxy
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 4180
    protocol: TCP
    targetPort: 4180
  selector:
    k8s-app: oauth2-proxy
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: oauth2-proxy
  namespace: kube-system
spec:
  rules:
  - host: ${cluster_base_domain}
    http:
      paths:
      - backend:
          serviceName: oauth2-proxy
          servicePort: 4180
        path: /oauth2
  tls:
  - hosts:
    - ${cluster_base_domain}
    secretName: ${cluster_base_domain}
