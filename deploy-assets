#!/usr/bin/env bash

if [ -z "${KUBECONFIG}" ]; then
    export KUBECONFIG=~/.kube/config
fi

# common manifests

kubectl apply -f generated/manifests

# monitoring

kubectl create namespace monitoring

kctl() {
    kubectl --namespace monitoring "$@"
}

kctl apply -f generated/manifests/prometheus-operator

# Wait for CRDs to be ready.
printf "Waiting for Operator to register custom resource definitions..."
until kctl get customresourcedefinitions servicemonitors.monitoring.coreos.com > /dev/null 2>&1; do sleep 1; printf "."; done
until kctl get customresourcedefinitions prometheuses.monitoring.coreos.com > /dev/null 2>&1; do sleep 1; printf "."; done
until kctl get customresourcedefinitions alertmanagers.monitoring.coreos.com > /dev/null 2>&1; do sleep 1; printf "."; done
until kctl get servicemonitors.monitoring.coreos.com > /dev/null 2>&1; do sleep 1; printf "."; done
until kctl get prometheuses.monitoring.coreos.com > /dev/null 2>&1; do sleep 1; printf "."; done
until kctl get alertmanagers.monitoring.coreos.com > /dev/null 2>&1; do sleep 1; printf "."; done
echo "done!"

kubectl apply -f generated/manifests/etcd-prometheus
kubectl apply -f generated/manifests/control-plane-prometheus

kctl create secret generic etcd-certs \
     --from-file=generated/etcd/etcd-client.pem \
     --from-file=generated/etcd/etcd-client-key.pem \
     --from-file=generated/etcd/ca.pem 

kctl apply -f generated/manifests/node-exporter
kctl apply -f generated/manifests/kube-state-metrics
kctl apply -f generated/manifests/grafana/grafana-credentials.yaml
kctl apply -f generated/manifests/grafana

find generated/manifests/prometheus -type f ! -name prometheus-k8s-roles.yaml ! -name prometheus-k8s-role-bindings.yaml -exec kubectl --namespace monitoring apply -f {} \;
kubectl apply -f generated/manifests/prometheus/prometheus-k8s-roles.yaml
kubectl apply -f generated/manifests/prometheus/prometheus-k8s-role-bindings.yaml

kctl apply -f generated/manifests/alertmanager/

# oauth2 proxy

kubectl apply -f generated/manifests/oauth-proxy

# ingress

curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/namespace.yaml \
    | kubectl apply -f -

curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/default-backend.yaml \
    | kubectl apply -f -

curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/configmap.yaml \
    | kubectl apply -f -

curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/tcp-services-configmap.yaml \
    | kubectl apply -f -

curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/udp-services-configmap.yaml \
    | kubectl apply -f -

curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/rbac.yaml \
    | kubectl apply -f -

kubectl apply -f generated/manifests/ingress
